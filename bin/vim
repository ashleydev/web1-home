#!/usr/bin/perl

use strict;
use v5.10.0;

use Cwd qw(realpath);
use File::Basename;

use constant DEBUG => 0;

my @vim_files;
my @vim_args;
my @lost_and_found;

my $flag_stdin;

# KNOWN ISSUES, PLEASE READ
# 1. this will only edit the realpath of the file if it already exists.   this is show it shows up easier in the process list
# 2. even though there are lists at the top of this file declared, they are lists in case someday Eric or Mike B want the functionality changed
#    to allow multiple editing.  If you would like to do that, make sure exec is switched to system and a foreach put in place
# 3. if it cannot detect who is editing the file, it is because the commandline used by the editor in the first place is using relative paths

if (! -t STDOUT) {
  say "Preventing piping from Vim.  Exiting.";
  exit(1);
}

foreach (@ARGV) {

  my ($pre_colon, $post_colon) = split(/:/);

  # disallow directories
  if (-d $_) {
    say "$_ is a directory.";
    exit(1);
  } elsif (-d $pre_colon) {
    say "$pre_colon is a directory.";
    exit(1);

  } elsif (-f $_) {
    push(@vim_files, { file => $_, line => 1 });
  } elsif (-f $pre_colon && $post_colon =~ m/^[0-9]+$/) {
    push(@vim_files, { file => $pre_colon, line => $post_colon });
  } elsif (defined(my $gitfile = getPath_ab($_))) {
    push(@vim_files, { file => $gitfile, line => 1 });
  } elsif (defined(my $gitfile = getPath_ab($pre_colon)) && $post_colon =~ m/^[0-9]+$/) {
    push(@vim_files, { file => $gitfile, line => $post_colon });
  } elsif ($_ eq '-') {
    $flag_stdin = 1;
    push(@vim_args, $_);
  } elsif (m/^(\+|-)/) {
    push(@vim_args, $_);
  } else {
    push(@lost_and_found, $_);
  }

}

if (! -t STDIN && ! $flag_stdin) {
  say "Preventing piping to Vim.  Exiting.";
  exit(1);
}

my @cmd;

if (my $hashref_file_data = shift(@vim_files)) {
  my $file = $hashref_file_data->{file};
  my $file_realpath = realpath($file);
  my $line = $hashref_file_data->{line};

  unshift(@vim_args, "+$line") if ($line > 1);

  @cmd = ('vi', $file_realpath, @vim_args);

} elsif (my $first_and_only_try = shift(@lost_and_found)) {
  @cmd = ('vi', $first_and_only_try, @vim_args);
} else {
  @cmd = ('vi', @vim_args);
}

my $file_to_edit = $cmd[1];
say "file to edit var: $file_to_edit" if DEBUG;
my $file_to_edit_dirname = dirname($file_to_edit);
my $file_to_edit_basename = basename($file_to_edit);

if ($file_to_edit_basename !~ m/^\./) {
  # add period to filename if none found
  $file_to_edit_basename = ".$file_to_edit_basename";
}

if (defined($file_to_edit) && -f "$file_to_edit_dirname/$file_to_edit_basename.swp") {
  my ($user, $ip, $stat, $screen_window) = getVimPsWhoInfo("vim? $file_to_edit");
  say "ps query: vi $file_to_edit" if DEBUG;

  my $buf;

  # check for user and ip from 'who' command
  if (defined($user) && defined($ip)) {
    $buf .= "Found swap file from $user, from $ip";

    # check if screen window provided
    if (defined($screen_window)) {
      if ($ENV{USER} eq $user && $ENV{WINDOW} eq $screen_window) {
	$buf .= ", on your current window ($screen_window)";
      } else {
	$buf .= ", on screen window $screen_window";
      }
    }

  } else {
    $buf .= "Found swap file, but unable to determine who is editing it.";
  }

  if (defined($stat) && $stat eq 'T') {
    $buf .= " (backgrounded)";
  }

  print "$buf\n";

} else {
  exec(@cmd) if @cmd;
}

# ---- getRevParseCdup getPath_ab - copied from Sjohnson::Git to not rely on external files
sub getRevParseCdup {
  my $buffer = `git rev-parse --show-cdup`;
  chomp($buffer);

  return $buffer;
}

sub getPath_ab {
  my $file = shift;

  if ($file =~ m{^(a|b)/}) {
    $file =~ s/^$&/getRevParseCdup($file)/e;

    if (-f $file) {
      return $file;
    }
  }

  return undef;
}

sub getVimPsWhoInfo {
  my $ps_query = shift;

  my $user;
  my $ip;
  my $screen_window;

  my $first_relevant_ps_line = (grep(/$ps_query/, split (/\n/, `ps aux`)))[0];
  return unless defined $first_relevant_ps_line;

  my @ps_chunks = split(' ', $first_relevant_ps_line);
  $user = $ps_chunks[0];
  my $pts = $ps_chunks[6];
  my $stat = $ps_chunks[7];

  my $first_relevant_who_line = (grep(/$user \s+ $pts/x, split (/\n/, `who`)))[0];
  return unless defined($first_relevant_who_line);

  my @who_chunks = split(' ', $first_relevant_who_line);
  if ($who_chunks[5] =~ m/^\((.*?)(:S.(\d+))?\)/i) {
    $ip = $1;
    $screen_window = $3;
  }

  return ($user, $ip, $stat, $screen_window);
}
